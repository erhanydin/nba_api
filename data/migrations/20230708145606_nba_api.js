/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function (knex) {
    return knex.schema
        .createTable('roles', (table) => {
            table.increments('role_id')
            table.string('role_name', 32).notNullable().unique()
        })
        .createTable('users', (table) => {
            table.increments('user_id')
            table.string('name', 128).notNullable()
            table.string('username', 128).notNullable().unique()
            table.string('email', 128).notNullable().unique()
            table.string('password', 128).notNullable()
            table.integer('role_id')
                .unsigned()
                .notNullable()
                .references('role_id')
                .inTable('roles')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
        })
        .createTable('favs', (table) => {
            table.increments('favs_id')
            table.integer('type').notNullable().unsigned()
            table.integer('type_id').notNullable()
            table.integer('user_id')
                .unsigned()
                .notNullable()
                .references('user_id')
                .inTable('users')
                .onUpdate('CASCADE')
                .onUpdate('CASCADE')
        })
        .createTable('notes', (table) => {
            table.increments('note_id')
            table.string('note_details')
            table.string('note_date').defaultTo(knex.fn.now()).notNullable()
            table.integer('favs_id')
                .unsigned()
                .references('favs_id')
                .inTable('favs')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
        })
        .createTable('teams', (table) => {
            table.increments('teamId')
            table.string('teamName', 128).notNullable().unique()
            table.integer('teamWins').notNullable().unsigned()
            table.integer('teamLoss').notNullable().unsigned()
            table.integer('teamPointsMade').notNullable().unsigned()
            table.integer('teamPointsSaw').notNullable().unsigned()
            table.integer('teamAv').notNullable()
            table.integer('teamHomeWins').notNullable().unsigned()
            table.integer('teamHomeLosses').notNullable().unsigned()
            table.integer('teamHomePointsMade').notNullable().unsigned()
            table.integer('teamHomePointsSaw').notNullable().unsigned()
            table.integer('teamAwayWins').notNullable().unsigned()
            table.integer('teamAwayLosses').notNullable().unsigned()
            table.integer('teamAwayPointsMade').notNullable().unsigned()
            table.integer('teamAwayPointsSaw').notNullable().unsigned()
            table.string('teamLogo').notNullable().unique()
        })
        .createTable('news', (table) => {
            table.increments('newsId')
            table.string('newsHeader_1').notNullable()
            table.string('newsHeader_2')
            table.string('newsHeader_3')
            table.string('newsDetails').notNullable()
            table.string('newsImage').notNullable()
            table.integer('teamId')
                .unsigned()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('role_id')
                .unsigned()
                .notNullable()
                .references('role_id')
                .inTable('roles')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
        })
        .createTable('players', (table) => {
            table.increments('playerId')
            table.string('playerName', 128).notNullable().unique()
            table.integer('playerAge').notNullable().unsigned()
            table.string('playerCountry').notNullable()
            table.integer('playerGame').notNullable()
            table.decimal('playerGmp', 2, 2).notNullable()
            table.decimal('playerGpts', 2, 2).notNullable()
            table.decimal('playerRb', 2, 2).notNullable()
            table.decimal('playerAst', 2, 2).notNullable()
            table.decimal('playerStl', 2, 2).notNullable()
            table.decimal('playerBlk', 2, 2).notNullable()
            table.decimal('playerTo', 2, 2).notNullable()
            table.decimal('player2PtsPerc', 2, 2).notNullable()
            table.decimal('player3PtsPerc', 2, 2).notNullable()
            table.decimal('playerFtPtsPerc', 2, 2).notNullable()
            table.integer('teamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
        })
        .createTable('games', (table) => {
            table.increments('id')
            table.integer('seriesId').notNullable().unsigned()
            table.integer('gameId').notNullable().unsigned()
            table.integer('firstTeamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('secondTeamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('firstTeamScore').notNullable().unsigned()
            table.integer('secondTeamScore').notNullable().unsigned()
        })
        .createTable('personalStats', (table) => {
            table.increments('id')
            table.integer('seriesId').notNullable().unsigned()
            table.integer('gameId').notNullable().unsigned()
            table.integer('teamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('playerId')
                .unsigned()
                .notNullable()
                .references('playerId')
                .inTable('players')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('playerTime').notNullable().unsigned()
            table.integer('playerPts').notNullable().unsigned()
            table.integer('playerReb').notNullable().unsigned()
            table.integer('playerAst').notNullable().unsigned()
            table.integer('playerBlk').notNullable().unsigned()
            table.integer('playerStl').notNullable().unsigned()
            table.integer('player2PtsTry').notNullable().unsigned()
            table.integer('player2PtsMade').notNullable().unsigned()
            table.integer('player3PtsTry').notNullable().unsigned()
            table.integer('player3PtsMade').notNullable().unsigned()
            table.integer('playerFtTry').notNullable().unsigned()
            table.integer('playerFtMade').notNullable().unsigned()
            table.integer('playerTo').notNullable().unsigned()
            table.integer('playerFaul').notNullable().unsigned()
        })
        .createTable('generalStats', (table) => {
            table.increments('id')
            table.integer('seriesId').notNullable().unsigned()
            table.integer('gameId').notNullable().unsigned()
            table.integer('firstTeamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('secondTeamId')
                .unsigned()
                .notNullable()
                .references('teamId')
                .inTable('teams')
                .onUpdate('CASCADE')
                .onDelete('CASCADE')
            table.integer('firstTeam2PtsTry').notNullable().unsigned()
            table.integer('firstTeam2PtsMade').notNullable().unsigned()
            table.integer('firstTeam3PtsTry').notNullable().unsigned()
            table.integer('firstTeam3PtsMade').notNullable().unsigned()
            table.integer('firstTeamFtTry').notNullable().unsigned()
            table.integer('firstTeamFtMade').notNullable().unsigned()
            table.integer('firstTeamDefReb').notNullable().unsigned()
            table.integer('firstTeamOffReb').notNullable().unsigned()
            table.integer('firstTeamAssist').notNullable().unsigned()
            table.integer('firstTeamTO').notNullable().unsigned()
            table.integer('firstTeamSteal').notNullable().unsigned()
            table.integer('firstTeamBlock').notNullable().unsigned()
            table.integer('firstTeamFaul').notNullable().unsigned()
            table.integer('secondTeam2PtsTry').notNullable().unsigned()
            table.integer('secondTeam2PtsMade').notNullable().unsigned()
            table.integer('secondTeam3PtsTry').notNullable().unsigned()
            table.integer('secondTeam3PtsMade').notNullable().unsigned()
            table.integer('secondTeamFtTry').notNullable().unsigned()
            table.integer('secondTeamFtMade').notNullable().unsigned()
            table.integer('secondTeamDefReb').notNullable().unsigned()
            table.integer('secondTeamOffReb').notNullable().unsigned()
            table.integer('secondTeamAssist').notNullable().unsigned()
            table.integer('secondTeamTO').notNullable().unsigned()
            table.integer('secondTeamSteal').notNullable().unsigned()
            table.integer('secondTeamBlock').notNullable().unsigned()
            table.integer('secondTeamFaul').notNullable().unsigned()
        })
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = function (knex) {
    return knex.schema
        .dropTableIfExists('generalStats')
        .dropTableIfExists('personalStats')
        .dropTableIfExists('games')
        .dropTableIfExists('players')
        .dropTableIfExists('news')
        .dropTableIfExists('teams')
        .dropTableIfExists('favs')
        .dropTableIfExists('notes')
        .dropTableIfExists('users')
        .dropTableIfExists('roles')
};
